# -*- coding: utf-8 -*-
"""automated_dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tHZEWW2ho5U3wMRQ69PeTG4KDgNj7--0
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import plotly.graph_objects as go

# ====== LOAD DATA ======
actual_data = pd.read_csv("usd_idr_actual.csv", comment="#", index_col=0)
forecast_latest = pd.read_csv("usd_idr_pred_latest.csv", comment="#", index_col=0)
forecast_yesterday = pd.read_csv("usd_idr_pred_yesterday.csv", comment="#", index_col=0)

# ====== FORMAT ULANG ======
actual_data = actual_data.reset_index().rename(columns={"index": "date"})
forecast_latest = forecast_latest.reset_index().rename(columns={"index": "date"})
forecast_yesterday = forecast_yesterday.reset_index().rename(columns={"index": "date"})

actual_data["date"] = pd.to_datetime(actual_data["date"])
forecast_latest["date"] = pd.to_datetime(forecast_latest["date"])
forecast_yesterday["date"] = pd.to_datetime(forecast_yesterday["date"])

actual_data = actual_data.rename(columns={"usd_idr": "value"})
actual_data["type"] = "actual"

forecast_data = forecast_latest.rename(columns={"predicted_usd_idr": "value"})
forecast_data["type"] = "forecast"

# Filter hanya hari kerja
forecast_data = forecast_data[forecast_data['date'].dt.weekday < 5]
forecast_yesterday = forecast_yesterday[forecast_yesterday['date'].dt.weekday < 5]

# ====== Gabungkan untuk visualisasi utama ======
data = pd.concat([actual_data, forecast_data], ignore_index=True)

# ====== SET PAGE ======
st.set_page_config(page_title="Prediksi USD/IDR", layout="wide")
st.title("📈 Dashboard Prediksi Nilai Tukar USD/IDR")
st.caption("Prediksi nilai tukar untuk 7 hari ke depan berdasarkan data 30 hari terakhir")

# ====== GRAFIK UTAMA ======
last_actual_date = actual_data['date'].max()
visual_data = data[data['date'] >= last_actual_date - pd.Timedelta(days=30)]

fig = px.line(
    visual_data,
    x='date',
    y='value',
    color='type',
    line_dash='type',
    labels={'value': 'Nilai Tukar (Rp)', 'date': 'Tanggal'},
    title='Nilai Tukar USD/IDR - Aktual dan Prediksi (30 Hari + Forecast)'
)
fig.update_traces(
    mode="lines+markers",
    hovertemplate='Tanggal: %{x|%d %b %Y}<br>Nilai: Rp %{y:,.2f}'
)

# ====== Garis Penghubung Aktual -> Prediksi (Fix agar tanggal sama ikut) ======
last_actual_point = actual_data.sort_values("date").iloc[-1]
try:
    first_forecast_point = forecast_data[forecast_data["date"] >= last_actual_point["date"]].sort_values("date").iloc[0]
    fig.add_trace(go.Scatter(
        x=[last_actual_point["date"], first_forecast_point["date"]],
        y=[last_actual_point["value"], first_forecast_point["value"]],
        mode="lines+markers",
        line=dict(color="blue", dash="dot"),
        marker=dict(size=10, color="blue"),
        name="today actual",
        showlegend=True
    ))
except IndexError:
    st.warning("⚠️ Prediksi tidak tersedia untuk tanggal setelah data aktual terakhir.")

# ====== TAMPILKAN ======
st.plotly_chart(fig, use_container_width=True)

# ====== INFO PREDIKSI KEMARIN ======
try:
    yesterday = datetime.today().date() - pd.Timedelta(days=1)
    pred_yest_val = forecast_yesterday.loc[forecast_yesterday['date'].dt.date == yesterday, 'predicted_usd_idr'].values[0]
    actual_today_val = actual_data.loc[actual_data['date'].dt.date == datetime.today().date(), 'value'].values[0]
    error = actual_today_val - pred_yest_val
    delta_str = f"selisih {error:+,.2f} dari data aktual"

    st.metric("Prediksi Kemarin", f"Rp {pred_yest_val:,.2f}", delta=delta_str)
except:
    st.warning("📌 Belum ada data aktual hari ini untuk membandingkan dengan prediksi kemarin.")

# ====== NOTIFIKASI LIBUR ======
today = datetime.today().date()
if today not in actual_data['date'].dt.date.values:
    st.warning("📅 Hari ini perdagangan libur")

# ====== TREN NAIK/TURUN ======
last_7_actual = actual_data.sort_values("date").tail(7)["value"].mean()
next_7_forecast = forecast_data.sort_values("date").head(7)["value"].mean()

st.caption(f"📊 Rata-rata 7 hari terakhir: Rp {last_7_actual:,.2f} | Rata-rata forecast: Rp {next_7_forecast:,.2f}")

if next_7_forecast > last_7_actual:
    st.info("📈 Tren USD/IDR diperkirakan akan naik")
elif next_7_forecast < last_7_actual:
    st.info("📉 Tren USD/IDR diperkirakan akan turun")
else:
    st.info("📊 Nilai tukar diperkirakan stabil")

# ====== SLIDER UNTUK RENTANG TANGGAL ======
min_date = data['date'].min().date()
max_date = data['date'].max().date()

date_range = st.slider("Pilih rentang tanggal", min_value=min_date, max_value=max_date, value=(min_date, max_date))
filtered = data[(data['date'].dt.date >= date_range[0]) & (data['date'].dt.date <= date_range[1])]

fig2 = px.line(
    filtered,
    x='date',
    y='value',
    color='type',
    line_dash='type',
    title="Rentang Waktu yang Dipilih"
)
st.plotly_chart(fig2, use_container_width=True)